version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tododb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  pgadmin: 
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - app-network

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/tododb
      PYTHONDONTWRITEBYTECODE: 1
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  next-frontend:
    build:
      context: ./next-app
      dockerfile: Dockerfile
    ports:
      - "3001:3000"
    volumes:
      - ./next-app:/app
      - /app/node_modules
      - /app/.next
    environment:
      WATCHPACK_POLLING: 'true'
      CHOKIDAR_USEPOLLING: 'true'
    depends_on:
      - backend
    networks:
      - app-network

  react-frontend:
    build:
      context: ./react-app
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./react-app:/app
      - /app/node_modules
    environment:
      CHOKIDAR_USEPOLLING: 'true'
      REACT_APP_API_URL: http://localhost:8000
    depends_on:
      - backend
    networks:
      - app-network

volumes:
  postgres_data:
  pgadmin_data:

networks:
  app-network:
    driver: bridge